#!/sbin/openrc-run
# Source utils.sh for getFTLPIDFile(), getFTLPID ()
PI_HOLE_SCRIPT_DIR="/opt/pihole"
utilsfile="${PI_HOLE_SCRIPT_DIR}/utils.sh"
# shellcheck disable=SC1090
. "${utilsfile}"

is_running() {
  if [ -d "/proc/${FTL_PID}" ]; then
    return 0
  fi
  return 1
}

cleanup() {
    # Run post-stop script, which does cleanup among runtime files
    sh "${PI_HOLE_SCRIPT_DIR}/pihole-FTL-poststop.sh"
}

# Start the service
start() {
  if is_running; then
    echo "pihole-FTL is already running"
  else
    # Run pre-start script, which pre-creates all expected files with correct permissions
    sh "${PI_HOLE_SCRIPT_DIR}/pihole-FTL-prestart.sh"

    if setcap CAP_NET_BIND_SERVICE,CAP_NET_RAW,CAP_NET_ADMIN,CAP_SYS_NICE,CAP_IPC_LOCK,CAP_CHOWN+eip "/usr/bin/pihole-FTL"; then
      su -s /bin/sh -c "/usr/bin/pihole-FTL" pihole
    else
      echo "Warning: Starting pihole-FTL as root because setting capabilities is not supported on this system"
      start-stop-daemon --start --quiet /usr/bin/pihole-FTL
    fi
    rc=$?
    # Cleanup if startup failed
    if [ "${rc}" != 0 ]; then
        cleanup
        exit $rc
    fi
    echo
  fi
}

# Stop the service
stop() {
  if is_running; then
    start-stop-daemon --stop --quiet /usr/bin/pihole-FTL
    while [ "$(pgrep pihole-FTL > /dev/null)" == 0 ]
    do
        echo "Waiting for the service to stop"
    done
    echo "Stopped"
  else
    echo "Not running"
  fi
  # Run post-stop script, which does cleanup among runtime files
  cleanup
  echo
}

# catch sudden termination
trap 'cleanup; exit 1' INT HUP TERM ABRT

# Get FTL's PID file path
FTL_PID_FILE="$(getFTLPIDFile)"

# Get FTL's current PID
FTL_PID="$(getFTLPID "${FTL_PID_FILE}")"

# Indicate the service status
status() {
  if service_started "${SVCNAME}"; then
    echo "[ ok ] pihole-FTL is running"
    exit 0
  else
    echo "[    ] pihole-FTL is not running"
    exit 1
  fi
}
